# pages/4_Analise_Critica_IA.py

# ==============================================================================
# VERS√ÉO 4.0 - PROMPT APRIMORADO
# - Adicionada an√°lise de categorias de gastos hist√≥ricos.
# - Prompt da IA atualizado para fornecer insights mais profundos e menos gen√©ricos,
#   correlacionando picos de previs√£o com as principais categorias de despesas.
# ==============================================================================

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from fpdf import FPDF
from fpdf.enums import XPos, YPos
import io
import os
from langchain_openai import ChatOpenAI
from langchain_core.output_parsers import StrOutputParser
from prophet import Prophet
from config import OPENAI_API_KEY
from datetime import datetime


# --- FUN√á√ÉO AUXILIAR PARA CARREGAR AS FONTES ---
def add_dejavu_fonts(pdf_instance):
    font_dir = os.path.join(os.getcwd(), 'static', 'fonts')

    if not os.path.isdir(font_dir):
        st.error(f"ERRO CR√çTICO: Diret√≥rio de fontes n√£o encontrado: {font_dir}")
        return False

    font_map = {
        '': 'DejaVuSans.ttf',
        'B': 'DejaVuSans-Bold.ttf',
        'I': 'DejaVuSans-Oblique.ttf',
        'BI': 'DejaVuSans-BoldOblique.ttf'
    }

    all_fonts_found = True
    for style, filename in font_map.items():
        font_file_path = os.path.join(font_dir, filename)
        if os.path.exists(font_file_path):
            pdf_instance.add_font('DejaVu', style, font_file_path)
        else:
            st.error(f"ARQUIVO DE FONTE ESSENCIAL N√ÉO ENCONTRADO: {font_file_path}")
            all_fonts_found = False

    return all_fonts_found


# --- FUN√á√ÉO DE PDF COM CORRE√á√ÉO FINAL ---
def gerar_pdf_completo(titulo, texto_analise, chart=None, table=None):
    pdf = FPDF()

    if not add_dejavu_fonts(pdf):
        st.error("Gera√ß√£o do PDF cancelada: falha ao carregar fontes customizadas.")
        return None

    pdf.add_page()

    pdf.set_font('DejaVu', 'B', 16)
    pdf.multi_cell(0, 10, titulo, align='C', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
    pdf.ln(5)

    # A an√°lise de texto agora √© tratada de forma mais robusta para UTF-8
    pdf.set_font('DejaVu', '', 11)
    pdf.multi_cell(0, 8, texto_analise)
    pdf.ln(10)

    if chart:
        try:
            pdf.add_page()
            pdf.set_font('DejaVu', "B", 12)
            pdf.cell(0, 10, "Gr√°fico da An√°lise", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.ln(5)
            img_bytes = io.BytesIO()
            chart.write_image(img_bytes, format="png", width=900, height=400, scale=2)
            img_bytes.seek(0)
            pdf.image(img_bytes, x=10, w=190)
        except Exception as e:
            pdf.set_text_color(255, 0, 0)
            pdf.multi_cell(0, 10,
                           f"ATEN√á√ÉO: Erro ao renderizar o gr√°fico. Verifique se 'kaleido' est√° instalado. Erro: {e}")
            pdf.set_text_color(0, 0, 0)

    if table is not None and not table.empty:
        pdf.add_page()
        pdf.set_font('DejaVu', "B", 12)
        pdf.cell(0, 10, "Dados Detalhados da Previs√£o", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.ln(5)

        df_table_str = table.copy().rename(
            columns={'ds': 'Data', 'yhat': 'Previsao_R', 'yhat_lower': 'Minimo_R', 'yhat_upper': 'Maximo_R'})
        df_table_str['Data'] = df_table_str['Data'].dt.strftime('%d/%m/%Y')

        col_widths = {'Data': 35, 'Previsao_R': 45, 'Minimo_R': 50, 'Maximo_R': 55}
        header = ['Data', 'Previsao_R', 'Minimo_R', 'Maximo_R']

        pdf.set_font('DejaVu', 'B', 9)
        for col_name in header:
            pdf.cell(col_widths.get(col_name, 40), 10, col_name.replace('_', ' '), border=1, align='C')
        pdf.ln()

        pdf.set_font('DejaVu', '', 8)
        for _, row in df_table_str.iterrows():
            pdf.cell(col_widths['Data'], 10, str(row['Data']), border=1, align='C')
            pdf.cell(col_widths['Previsao_R'], 10, f"R$ {row['Previsao_R']:,.2f}", border=1, align='R')
            pdf.cell(col_widths['Minimo_R'], 10, f"R$ {row['Minimo_R']:,.2f}", border=1, align='R')
            pdf.cell(col_widths['Maximo_R'], 10, f"R$ {row['Maximo_R']:,.2f}", border=1, align='R', new_x=XPos.LMARGIN,
                     new_y=YPos.NEXT)

    return bytes(pdf.output())


# --- O RESTANTE DO C√ìDIGO PERMANECE ID√äNTICO AT√â O BOT√ÉO ---

st.set_page_config(page_title="An√°lise com IA", page_icon="ü§ñ", layout="wide")
st.title("ü§ñ An√°lise Avan√ßada com Intelig√™ncia Artificial")
st.markdown("---")


@st.cache_resource
def get_llm():
    return ChatOpenAI(api_key=OPENAI_API_KEY, model="gpt-4.1-mini", temperature=0.3, max_tokens=2000)


llm = get_llm()
st.header("An√°lise Preditiva de Gastos")

if 'df_completo' not in st.session_state:
    try:
        from db_manager import carregar_dados

        st.session_state.df_completo = carregar_dados()
    except ImportError:
        st.error("Arquivo 'db_manager.py' n√£o encontrado.")
        st.stop()
    except Exception as e:
        st.error(f"Ocorreu um erro ao carregar os dados: {e}")
        st.stop()

if 'df_completo' not in st.session_state or st.session_state.df_completo.empty:
    st.error("Falha ao carregar dados. Verifique a conex√£o com o banco de dados.")
    st.stop()

df_despesas_completo = st.session_state.df_completo[st.session_state.df_completo['TipoMov'] == 'Cx.Out'].copy()
df_despesas_completo['Dia'] = pd.to_datetime(df_despesas_completo['Dia'])
dias_para_prever = st.slider("Selecione quantos dias voc√™ quer prever no futuro:", 30, 365, 90, key="dias_predicao")

if st.button("Gerar An√°lise Preditiva Completa", type="primary", use_container_width=True):
    with st.spinner("Analisando seu hist√≥rico e construindo a previs√£o... Isso pode levar um minuto."):
        df_preditivo = df_despesas_completo[['Dia', 'valor']].rename(columns={'Dia': 'ds', 'valor': 'y'})
        df_preditivo_diario = df_preditivo.groupby('ds').sum().reset_index()

        if len(df_preditivo_diario) < 10:
            st.error(
                "Hist√≥rico de dados insuficiente para uma previs√£o confi√°vel. S√£o necess√°rios pelo menos 10 dias de gastos registrados.")
        else:
            modelo = Prophet(daily_seasonality=True)
            modelo.add_country_holidays(country_name='BR')
            modelo.fit(df_preditivo_diario)
            futuro = modelo.make_future_dataframe(periods=dias_para_prever)
            previsao = modelo.predict(futuro)

            fig_pred = go.Figure()
            fig_pred.add_trace(go.Scatter(x=previsao['ds'], y=previsao['yhat_upper'], fill=None, mode='lines',
                                          line_color='rgba(0,176,246,0.2)', name='M√°ximo Previsto'))
            fig_pred.add_trace(go.Scatter(x=previsao['ds'], y=previsao['yhat_lower'], fill='tonexty', mode='lines',
                                          line_color='rgba(0,176,246,0.2)', name='M√≠nimo Previsto'))
            fig_pred.add_trace(
                go.Scatter(x=previsao['ds'], y=previsao['yhat'], mode='lines', line=dict(color='cyan', width=3),
                           name='Previs√£o'))
            fig_pred.add_trace(go.Scatter(x=df_preditivo_diario['ds'], y=df_preditivo_diario['y'], mode='markers',
                                          marker=dict(color='yellow', size=5), name='Gastos Reais'))
            fig_pred.update_layout(title_text="Proje√ß√£o de Gastos Futuros vs. Hist√≥rico", xaxis_title="Data",
                                   yaxis_title="Valor Gasto (R$)",
                                   legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1))

            st.session_state.analise_pred_fig = fig_pred
            df_previsao_tabela = previsao[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(dias_para_prever)
            st.session_state.analise_pred_tabela = df_previsao_tabela

            if 'analise_pred_texto' in st.session_state:
                del st.session_state['analise_pred_texto']

            with st.spinner("IA parceira gerando a an√°lise explicativa dos resultados..."):
                try:
                    # ==================================================================
                    # NOVA SE√á√ÉO: AN√ÅLISE DE CATEGORIAS PARA ENRIQUECER O PROMPT
                    # ==================================================================
                    # Verifica se a coluna 'Categoria' existe no dataframe.
                    # Adapte 'Categoria' para o nome real da sua coluna.
                    if 'Categoria' in df_despesas_completo.columns:
                        top_categorias = df_despesas_completo.groupby('Categoria')['valor'].sum().nlargest(5)
                        analise_historica_categorias = "\n\nAn√°lise do Hist√≥rico de Gastos por Categoria:\n"
                        analise_historica_categorias += "As 5 categorias com maiores gastos no seu hist√≥rico foram:\n"
                        for categoria, total in top_categorias.items():
                            analise_historica_categorias += f"- {categoria}: Total de R$ {total:,.2f}\n"
                    else:
                        analise_historica_categorias = "\n\n(N√£o foi poss√≠vel analisar as categorias pois a coluna 'Categoria' n√£o foi encontrada no hist√≥rico de dados.)"

                    total_previsto = df_previsao_tabela['yhat'].sum()

                    # ==================================================================
                    # PROMPT ATUALIZADO E MAIS ROBUSTO
                    # ==================================================================
                    contexto_preditivo = (
                        f"Voc√™ √© um analista financeiro s√™nior, especialista em finan√ßas pessoais e an√°lise de dados. Sua tarefa √© criar um relat√≥rio detalhado e acion√°vel para um usu√°rio.\n\n"
                        f"**DADOS PARA AN√ÅLISE:**\n"
                        f"1.  **Previs√£o de Gastos:** A previs√£o para os pr√≥ximos {dias_para_prever} dias indica um gasto total de aproximadamente **R$ {total_previsto:,.2f}**. O usu√°rio est√° vendo um gr√°fico com a proje√ß√£o di√°ria, os picos e os vales.\n"
                        f"2.  **Contexto Hist√≥rico:** {analise_historica_categorias}\n\n"
                        f"**SUA TAREFA (siga esta estrutura rigorosamente):**\n\n"
                        f"### **1. Resumo Executivo da Proje√ß√£o**\n"
                        f"Comece com um par√°grafo claro e direto sobre o que o valor total previsto significa para o planejamento financeiro do usu√°rio no per√≠odo.\n\n"
                        f"### **2. An√°lise Detalhada dos Picos de Gastos**\n"
                        f"Identifique no gr√°fico de previs√£o as semanas ou dias espec√≠ficos com os maiores picos de despesas. Usando a an√°lise do hist√≥rico de categorias, **fa√ßa uma infer√™ncia educada sobre QUAIS CATEGORIAS provavelmente est√£o causando esses picos**. Por exemplo: 'O pico na primeira semana do m√™s provavelmente est√° ligado a despesas de 'Aluguel' e 'Contas', que s√£o suas maiores categorias de gasto'. Seja espec√≠fico.\n\n"
                        f"### **3. Tend√™ncias e Padr√µes Ocultos**\n"
                        f"Al√©m dos picos √≥bvios, identifique padr√µes mais sutis. Os gastos aumentam em dias de semana espec√≠ficos? H√° uma queda consistente nos fins de semana? Existe alguma tend√™ncia geral de aumento ou diminui√ß√£o dos gastos ao longo do per√≠odo? Comente sobre a volatilidade da previs√£o (a dist√¢ncia entre o m√≠nimo e o m√°ximo previsto).\n\n"
                        f"### **4. Recomenda√ß√µes Estrat√©gicas e Acion√°veis**\n"
                        f"Com base em TUDO o que foi analisado (picos, categorias, tend√™ncias), forne√ßa pelo menos 3 recomenda√ß√µes pr√°ticas e personalizadas. N√£o d√™ conselhos gen√©ricos. Por exemplo:\n"
                        f"- 'Para a categoria de **{top_categorias.index[0]}**, que √© sua maior despesa, sugiro revisar X ou Y para reduzir o impacto no pico da semana Z.'\n"
                        f"- 'Dado que seus gastos caem nos fins de semana, considere criar um 'desafio de economia' nesses dias para potencializar ainda mais essa tend√™ncia.'\n\n"
                        f"Use uma linguagem profissional, mas encorajadora. O objetivo √© dar ao usu√°rio clareza, controle e insights que ele n√£o conseguiria ver sozinho."
                    )

                    chain = get_llm() | StrOutputParser()
                    st.session_state.analise_pred_texto = chain.invoke(contexto_preditivo)

                except Exception as e:
                    st.session_state.analise_pred_texto = None
                    st.error(
                        f"Ocorreu um erro ao gerar a an√°lise de texto com a IA. Verifique sua chave de API ou tente novamente. Detalhe do Erro: {e}")

# --- O c√≥digo de exibi√ß√£o dos resultados permanece o mesmo ---
if 'analise_pred_fig' in st.session_state:
    st.markdown("### Gr√°fico da Previs√£o")
    st.plotly_chart(st.session_state.analise_pred_fig, use_container_width=True)

if 'analise_pred_texto' in st.session_state and st.session_state.analise_pred_texto:
    st.markdown("### An√°lise Explicativa da IA")
    st.markdown(st.session_state.analise_pred_texto)
    if 'analise_pred_tabela' in st.session_state:
        st.markdown("### Detalhes da Previs√£o")
        df_para_exibir = st.session_state.analise_pred_tabela.copy()
        df_para_exibir = df_para_exibir.rename(
            columns={'ds': 'Data', 'yhat': 'Previs√£o (R$)', 'yhat_lower': 'M√≠nimo Estimado (R$)',
                     'yhat_upper': 'M√°ximo Estimado (R$)'})
        st.dataframe(df_para_exibir.style.format(
            {'Previs√£o (R$)': "R$ {:,.2f}", 'M√≠nimo Estimado (R$)': "R$ {:,.2f}", 'M√°ximo Estimado (R$)': "R$ {:,.2f}",
             'Data': '{:%d/%m/%Y}'}))

if 'analise_pred_fig' in st.session_state:
    st.markdown("---")
    st.subheader("üì• Baixar Relat√≥rio Completo")

    pdf_bytes = gerar_pdf_completo("Relat√≥rio de An√°lise Preditiva de Gastos",
                                   st.session_state.get('analise_pred_texto', "A an√°lise textual n√£o p√¥de ser gerada."),
                                   chart=st.session_state.analise_pred_fig, table=st.session_state.analise_pred_tabela)

    if pdf_bytes:
        st.download_button(label="Gerar Relat√≥rio em PDF", data=pdf_bytes,
                           file_name=f"Relatorio_Preditivo_GDUART_{datetime.now().strftime('%Y%m%d')}.pdf",
                           mime="application/pdf", use_container_width=True)
    else:
        st.error(
            "O bot√£o de download n√£o foi renderizado porque a gera√ß√£o do arquivo PDF falhou. Verifique os erros de carregamento de fonte acima.")